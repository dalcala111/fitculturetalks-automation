name: "Deuce Reference Dance Video Generator"

on:
  repository_dispatch:
    types: [trigger-shih-tzu-video-reference]
  workflow_dispatch:
    inputs:
      prompt:
        description: 'Manual prompt override'
        required: false
        default: ''

jobs:
  generate-deuce-dance-video:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Debug n8n Payload
      run: |
        echo "=== DEBUGGING N8N PAYLOAD ==="
        echo "Raw payload:"
        echo '${{ toJson(github.event.client_payload) }}'
        echo "==========================="
        echo "Selected dance: '${{ github.event.client_payload.selected_dance }}'"
        echo "Reference URL: '${{ github.event.client_payload.reference_video_url }}'"
        echo "Runway prompt: '${{ github.event.client_payload.runway_prompt }}'"
        echo "Use video ref: '${{ github.event.client_payload.use_video_reference }}'"
        echo "==========================="

    - name: Clean workspace
      run: |
        echo "🧹 Cleaning workspace..."
        rm -f *.mp4 *.png *.jpg *.wav *.mp3
        echo "✅ Workspace cleaned"

    - name: Download reference video
      env:
        REFERENCE_VIDEO_URL: ${{ github.event.client_payload.reference_video_url }}
        SELECTED_DANCE: ${{ github.event.client_payload.selected_dance }}
      run: |
        echo "🎥 Downloading reference video for $SELECTED_DANCE..."
        echo "📺 URL: $REFERENCE_VIDEO_URL"
        
        if [ -z "$REFERENCE_VIDEO_URL" ]; then
          echo "❌ ERROR: Reference video URL is empty!"
          echo "Check your n8n workflow - reference_video_url is not being sent"
          exit 1
        fi
        
        # Download the reference video
        curl -L -o "reference_video.mp4" "$REFERENCE_VIDEO_URL"
        
        # Verify download
        if [ -f "reference_video.mp4" ] && [ -s "reference_video.mp4" ]; then
          echo "✅ Reference video downloaded successfully!"
          ls -la reference_video.mp4
        else
          echo "❌ Failed to download reference video or file is empty"
          exit 1
        fi

    - name: Setup Python environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pillow opencv-python numpy imageio imageio-ffmpeg
        echo "📦 Dependencies installed"

    - name: Install FFmpeg
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        echo "🎬 FFmpeg installed"

    - name: Generate video with RunwayML
      env:
        RUNWAY_PROMPT: ${{ github.event.client_payload.runway_prompt }}
        SELECTED_DANCE: ${{ github.event.client_payload.selected_dance }}
        RUNWAYML_API_KEY: ${{ secrets.RUNWAYML_API_KEY }}
      run: |
        echo "🎬 Generating video with RunwayML..."
        echo "📝 Prompt: $RUNWAY_PROMPT"
        echo "💃 Dance: $SELECTED_DANCE"
        
        cat > runway_generator_fixed.py << 'EOF'
        import requests
        import json
        import os
        import time
        import base64

        def upload_reference_video():
            if not os.path.exists("reference_video.mp4"):
                print("❌ Reference video not found")
                return None
                
            with open("reference_video.mp4", "rb") as f:
                video_data = f.read()
                
            print(f"📹 Reference video size: {len(video_data)} bytes")
            return base64.b64encode(video_data).decode('utf-8')

        def generate_video():
            api_key = os.environ.get('RUNWAYML_API_KEY')
            prompt = os.environ.get('RUNWAY_PROMPT', '')
            
            if not api_key:
                print("❌ RunwayML API key not found")
                return False
                
            if not prompt:
                print("❌ Runway prompt not found")
                return False
                
            print(f"🎯 Using prompt: {prompt[:100]}...")
            
            reference_video_b64 = upload_reference_video()
            if not reference_video_b64:
                print("❌ Failed to upload reference video")
                return False
                
            headers = {
                'Authorization': f'Bearer {api_key}',
                'Content-Type': 'application/json'
            }
            
            payload = {
                "promptText": prompt,
                "init_video": reference_video_b64,
                "duration": 10,
                "ratio": "9:16",
                "watermark": False,
                "motionScore": 7
            }
            
            print("🚀 Sending request to RunwayML...")
            
            try:
                response = requests.post(
                    'https://api.dev.runwayml.com/v1/image_to_video',
                    headers=headers,
                    json=payload,
                    timeout=30
                )
                
                if response.status_code == 200:
                    result = response.json()
                    print(f"✅ RunwayML request successful: {result}")
                    
                    with open('runway_task.json', 'w') as f:
                        json.dump(result, f, indent=2)
                        
                    return True
                else:
                    print(f"❌ RunwayML API error: {response.status_code}")
                    print(f"Response: {response.text}")
                    return False
                    
            except Exception as e:
                print(f"❌ Request failed: {e}")
                return False

        if __name__ == "__main__":
            success = generate_video()
            if success:
                print("✅ Video generation initiated successfully")
            else:
                print("❌ Video generation failed")
                exit(1)
        EOF
        
        python runway_generator_fixed.py

    - name: Create fallback video
      if: failure()
      env:
        RUNWAY_PROMPT: ${{ github.event.client_payload.runway_prompt }}
        SELECTED_DANCE: ${{ github.event.client_payload.selected_dance }}
      run: |
        echo "🔄 Creating fallback video..."
        
        cat > create_fallback.py << 'EOF'
        import cv2
        import numpy as np
        import os

        def create_fallback():
            """Create a simple fallback video"""
            if not os.path.exists("reference_video.mp4"):
                print("❌ No reference video for fallback")
                return False
                
            # Read first frame from reference video
            cap = cv2.VideoCapture("reference_video.mp4")
            ret, frame = cap.read()
            cap.release()
            
            if not ret:
                print("❌ Could not read reference video")
                return False
                
            # Resize to vertical format
            height, width = frame.shape[:2]
            target_width, target_height = 1080, 1920
            
            # Calculate scaling
            scale = min(target_width/width, target_height/height)
            new_width = int(width * scale)
            new_height = int(height * scale)
            
            # Resize frame
            resized = cv2.resize(frame, (new_width, new_height))
            
            # Create video writer
            fourcc = cv2.VideoWriter_fourcc(*'mp4v')
            out = cv2.VideoWriter('final_animation.mp4', fourcc, 30.0, (1080, 1920))
            
            # Create canvas
            canvas = np.ones((1920, 1080, 3), dtype=np.uint8) * 255
            
            # Center the frame
            y_offset = (1920 - new_height) // 2
            x_offset = (1080 - new_width) // 2
            canvas[y_offset:y_offset+new_height, x_offset:x_offset+new_width] = resized
            
            # Write 300 frames (10 seconds at 30fps)
            for i in range(300):
                out.write(canvas)
                
            out.release()
            print("✅ Fallback video created")
            return True

        if __name__ == "__main__":
            create_fallback()
        EOF
        
        python create_fallback.py

    - name: Process final video
      env:
        SELECTED_DANCE: ${{ github.event.client_payload.selected_dance }}
      run: |
        echo "🎬 Processing final video..."
        
        # Check for generated video
        if [ ! -f "final_animation.mp4" ]; then
          echo "❌ No video file found"
          ls -la *.mp4 2>/dev/null || echo "No MP4 files found"
          exit 1
        fi
        
        # Add simple text overlay
        ffmpeg -i final_animation.mp4 \
          -vf "drawtext=text='Deuce does the $SELECTED_DANCE!':fontsize=48:fontcolor=white:x=(w-text_w)/2:y=h-120:box=1:boxcolor=black@0.8:boxborderw=6" \
          -c:v libx264 -c:a copy \
          tiktok_masterpiece.mp4
          
        if [ -f "tiktok_masterpiece.mp4" ]; then
          echo "✅ Final video processed successfully!"
          ls -la tiktok_masterpiece.mp4
        else
          echo "⚠️ Using original video as final output"
          cp final_animation.mp4 tiktok_masterpiece.mp4
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deuce-dance-video
        path: |
          tiktok_masterpiece.mp4
          final_animation.mp4
          reference_video.mp4
          runway_task.json
        retention-days: 7

    - name: Summary
      run: |
        echo "## 🕺 Deuce Dance Video Generated! ✨" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "tiktok_masterpiece.mp4" ]; then
          VIDEO_SIZE=$(du -h tiktok_masterpiece.mp4 | cut -f1)
          echo "- 🎥 **Video:** tiktok_masterpiece.mp4 ($VIDEO_SIZE)" >> $GITHUB_STEP_SUMMARY
          echo "- 💃 **Dance:** ${{ github.event.client_payload.selected_dance }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📱 **Format:** 1080x1920 (9:16)" >> $GITHUB_STEP_SUMMARY
          echo "- ⏱️ **Duration:** 10 seconds" >> $GITHUB_STEP_SUMMARY
          echo "- 🎬 **Status:** Ready for upload!" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ **Status:** Video generation failed" >> $GITHUB_STEP_SUMMARY
        fi
