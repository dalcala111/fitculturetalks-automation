name: "Ultimate Image Generator Automation"
on:
  repository_dispatch:
    types: [trigger-midjourney]
  workflow_dispatch:
    inputs:
      prompt:
        description: 'Image generation prompt'
        required: true
        default: 'beautiful anime fitness girl doing morning yoga'
jobs:
  image-generator:
    runs-on: ubuntu-latest
    
    steps:
    - name: Set up job
      run: echo "🚀 Starting Ultimate Image Generator mission"
      
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Clean Previous Images
      run: |
        echo "🧹 Cleaning previous images and artifacts..."
        rm -f dalle_generation_*.png
        rm -f dalle_generation_*.jpg
        rm -f *.png
        rm -f *.jpg
        rm -f final_animation.mp4
        rm -f *.mp4
        echo "✅ Previous images and videos cleared"
        echo "📁 Current directory after cleanup:"
        ls -la
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        # Update pip and install from requirements
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "📦 Installed packages:"
        pip list

    - name: Debug Prompt Input
      env:
        PROMPT: ${{ github.event.client_payload.prompt || github.event.inputs.prompt || 'beautiful anime fitness girl doing morning yoga' }}
      run: |
        echo "🔍 Debug: Checking prompt input..."
        echo "Repository dispatch prompt: ${{ github.event.client_payload.prompt }}"
        echo "Manual input prompt: ${{ github.event.inputs.prompt }}"
        echo "Final PROMPT environment variable: $PROMPT"
        echo "Prompt length: ${#PROMPT}"
        
    - name: Run Ultimate Image Generator
      env:
        PROMPT: ${{ github.event.client_payload.prompt || github.event.inputs.prompt || 'beautiful anime fitness girl doing morning yoga' }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        N8N_WEBHOOK: ${{ secrets.N8N_WEBHOOK }}
      run: |
        echo "🎨 Generating image with prompt: $PROMPT"
        # Run the ultimate DALL-E image generator
        python image_generator.py
        
        # Verify image was created
        echo "📸 Checking generated images..."
        if ls dalle_generation_*.png 1> /dev/null 2>&1; then
          echo "✅ New image generated successfully!"
          ls -la dalle_generation_*.png
        else
          echo "⚠️ No PNG files found, checking for other formats..."
          ls -la *.jpg *.jpeg 2>/dev/null || echo "❌ No image files found!"
        fi

    # NEW ANIMATION SECTION STARTS HERE
    - name: Install Animation Dependencies
      run: |
        pip install opencv-python pillow numpy imageio imageio-ffmpeg
        echo "🎬 Animation dependencies installed"

    - name: Create Animation Script
      run: |
        cat > animate_image.py << 'EOF'
        import cv2
        import numpy as np
        from PIL import Image
        import os
        from pathlib import Path
        import imageio
        import glob

        def create_social_media_animation(image_path, output_path="final_animation.mp4"):
            """
            Create an engaging animation from DALL-E generated image for social media
            """
            print(f"🎬 Creating animation from: {image_path}")
            
            # Load the image
            img = cv2.imread(image_path)
            if img is None:
                print(f"❌ Could not load image: {image_path}")
                return False
                
            height, width = img.shape[:2]
            print(f"📏 Original image size: {width}x{height}")
            
            # Social media format (9:16 aspect ratio for TikTok/YouTube Shorts)
            target_width = 1080
            target_height = 1920
            
            # Calculate scaling to fit within target dimensions
            scale = min(target_width/width, target_height/height)
            new_width = int(width * scale)
            new_height = int(height * scale)
            
            # Resize image
            img_resized = cv2.resize(img, (new_width, new_height))
            
            # Create canvas with target dimensions (black background)
            canvas = np.zeros((target_height, target_width, 3), dtype=np.uint8)
            
            # Center the image on canvas
            y_offset = (target_height - new_height) // 2
            x_offset = (target_width - new_width) // 2
            canvas[y_offset:y_offset+new_height, x_offset:x_offset+new_width] = img_resized
            
            # Animation parameters
            fps = 30
            duration = 8  # seconds - perfect for social media
            total_frames = fps * duration
            frames = []
            
            print(f"🎭 Creating {total_
