name: "Ultimate TikTok Content Creator"
on:
  repository_dispatch:
    types: [trigger-midjourney]
  workflow_dispatch:
    inputs:
      prompt:
        description: 'Image generation prompt'
        required: true
        default: 'beautiful anime fitness girl doing morning yoga'

jobs:
  tiktok-creator:
    runs-on: ubuntu-latest
    
    steps:
    - name: Set up job
      run: echo "🚀 Starting TikTok Content Creation mission"
      
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Clean Previous Files
      run: |
        echo "🧹 Cleaning previous files..."
        rm -f dalle_generation_*.png dalle_generation_*.jpg
        rm -f *.png *.jpg *.mp4 *.wav *.mp3
        rm -f final_animation.mp4 tiktok_masterpiece.mp4
        echo "✅ Previous files cleared"
        echo "📁 Current directory after cleanup:"
        ls -la
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "📦 Dependencies installed"

    - name: Debug Prompt Input
      env:
        PROMPT: ${{ github.event.client_payload.prompt || github.event.inputs.prompt || 'beautiful anime fitness girl doing morning yoga' }}
        RECIPE_TEXT: ${{ github.event.client_payload.recipe_text }}
      run: |
        echo "🔍 Debug: Checking inputs..."
        echo "Image prompt: $PROMPT"
        echo "Recipe text: $RECIPE_TEXT"
        echo "Event type: ${{ github.event.action }}"

    - name: Generate Image
      env:
        PROMPT: ${{ github.event.client_payload.prompt || github.event.inputs.prompt || 'beautiful anime fitness girl doing morning yoga' }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        N8N_WEBHOOK: ${{ secrets.N8N_WEBHOOK }}
      run: |
        echo "🎨 Generating image with prompt: $PROMPT"
        python image_generator.py
        
        echo "📸 Checking generated images..."
        if ls dalle_generation_*.png 1> /dev/null 2>&1; then
          echo "✅ New image generated successfully!"
          ls -la dalle_generation_*.png
        else
          echo "⚠️ No PNG files found, checking for other formats..."
          ls -la *.jpg *.jpeg 2>/dev/null || echo "❌ No image files found!"
        fi

    - name: Install Animation Dependencies
      run: |
        pip install opencv-python pillow numpy imageio imageio-ffmpeg
        echo "🎬 Animation dependencies installed"

    - name: Create Animation Script
      run: |
        cat > animate_image.py << 'EOF'
        import cv2
        import numpy as np
        from PIL import Image
        import os
        from pathlib import Path
        import imageio
        import glob

        def create_social_media_animation(image_path, output_path="final_animation.mp4"):
            print(f"🎬 Creating animation from: {image_path}")
            
            img = cv2.imread(image_path)
            if img is None:
                print(f"❌ Could not load image: {image_path}")
                return False
                
            height, width = img.shape[:2]
            print(f"📏 Original image size: {width}x{height}")
            
            # Social media format (9:16 aspect ratio)
            target_width = 1080
            target_height = 1920
            
            scale = min(target_width/width, target_height/height)
            new_width = int(width * scale)
            new_height = int(height * scale)
            
            img_resized = cv2.resize(img, (new_width, new_height))
            canvas = np.zeros((target_height, target_width, 3), dtype=np.uint8)
            
            y_offset = (target_height - new_height) // 2
            x_offset = (target_width - new_width) // 2
            canvas[y_offset:y_offset+new_height, x_offset:x_offset+new_width] = img_resized
            
            fps = 30
            duration = 8
            total_frames = fps * duration
            frames = []
            
            print(f"🎭 Creating {total_frames} frames...")
            
            for frame_num in range(total_frames):
                progress = frame_num / total_frames
                pulse = 1.0 + np.sin(progress * 6 * np.pi) * 0.03
                angle = np.sin(progress * 2 * np.pi) * 1.5
                zoom = 1.0 + np.sin(progress * np.pi) * 0.05
                scale_factor = pulse * zoom
                
                center = (target_width // 2, target_height // 2)
                rotation_matrix = cv2.getRotationMatrix2D(center, angle, scale_factor)
                frame = cv2.warpAffine(canvas, rotation_matrix, (target_width, target_height))
                
                hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
                hsv[:, :, 1] = cv2.multiply(hsv[:, :, 1], 1.15)
                frame = cv2.cvtColor(hsv, cv2.COLOR_HSV2BGR)
                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                frames.append(frame_rgb)
                
                if frame_num % 60 == 0:
                    print(f"⏳ Frame {frame_num}/{total_frames}")
            
            print("💾 Saving animation...")
            imageio.mimsave(output_path, frames, fps=fps, quality=9)
            print(f"✅ Animation saved as {output_path}")
            return True

        def main():
            print("🔍 Looking for DALL-E generated images...")
            image_patterns = ["dalle_generation_*.png", "dalle_generation_*.jpg", "*.png", "*.jpg"]
            
            image_files = []
            for pattern in image_patterns:
                found_files = glob.glob(pattern)
                if found_files:
                    image_files.extend(found_files)
                    break
            
            if not image_files:
                print("❌ No image files found!")
                return False
                
            image_path = image_files[0]
            print(f"🖼️ Using image: {image_path}")
            return create_social_media_animation(image_path)

        if __name__ == "__main__":
            main()
        EOF

    - name: Generate Animation
      run: |
        echo "🎬 Creating animation..."
        python animate_image.py

    - name: Verify Animation Output
      run: |
        if [ -f "final_animation.mp4" ]; then
          echo "✅ Animation file created successfully!"
          ls -lh final_animation.mp4
        else
          echo "❌ Animation file not found!"
          echo "📁 Current directory contents:"
          ls -la
          exit 1
        fi

    # NEW: Add Text Overlay Immediately After Animation
    - name: Install Video Processing Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg imagemagick fonts-dejavu-core fonts-liberation
        echo "🎬 Video processing environment ready!"

    - name: Add Recipe Text Overlay
      env:
        RECIPE_TEXT: ${{ github.event.client_payload.recipe_text }}
      run: |
        # Check if we have recipe text to add
        if [ -n "$RECIPE_TEXT" ] && [ -f "final_animation.mp4" ]; then
          echo "📝 Adding text overlay: $RECIPE_TEXT"
          
          # Clean recipe text for FFmpeg (remove problematic characters)
          CLEAN_TEXT=$(echo "$RECIPE_TEXT" | sed "s/'//g" | sed 's/"//g' | tr '\n' ' ')
          echo "📝 Cleaned text: $CLEAN_TEXT"
          
          # Create text overlay with FFmpeg
          ffmpeg -y \
            -i final_animation.mp4 \
            -vf "drawtext=text='$CLEAN_TEXT':fontfile=/usr/share/fonts/truetype/liberation/LiberationSans-Bold.ttf:fontsize=36:fontcolor=white:x=(w-text_w)/2:y=h-150:box=1:boxcolor=black@0.8:boxborderw=8:shadowcolor=black@0.7:shadowx=2:shadowy=2" \
            -c:a copy \
            -preset fast \
            tiktok_masterpiece.mp4
          
          if [ -f "tiktok_masterpiece.mp4" ]; then
            echo "✅ TikTok masterpiece created with text overlay!"
            ls -lh tiktok_masterpiece.mp4
          else
            echo "⚠️ Text overlay failed, keeping original animation"
            cp final_animation.mp4 tiktok_masterpiece.mp4
          fi
        else
          echo "⚠️ No recipe text provided or animation missing, using animation as masterpiece"
          cp final_animation.mp4 tiktok_masterpiece.mp4
        fi

    - name: Final Verification
      run: |
        echo "📊 Final output verification:"
        if [ -f "tiktok_masterpiece.mp4" ]; then
          SIZE=$(du -h tiktok_masterpiece.mp4 | cut -f1)
          echo "✅ TikTok Masterpiece: $SIZE"
          
          # Get video info with ffmpeg
          ffprobe -v quiet -print_format json -show_format -show_streams tiktok_masterpiece.mp4 | jq '.format.duration, .streams[0].width, .streams[0].height' || echo "Video info not available"
        fi
        
        if [ -f "final_animation.mp4" ]; then
          SIZE=$(du -h final_animation.mp4 | cut -f1)
          echo "✅ Original Animation: $SIZE"
        fi

    # UPLOAD ARTIFACTS
    - name: Upload Generated Images
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: generated-images
        path: "dalle_generation_*.png"
        retention-days: 30

    - name: Upload Animation
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: animated-video
        path: "final_animation.mp4"
        retention-days: 30

    - name: Upload TikTok Masterpiece
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: tiktok-masterpiece
        path: |
          tiktok_masterpiece.mp4
          final_animation.mp4
        retention-days: 30

    - name: Create Workflow Summary
      if: always()
      run: |
        echo "## 🎬 TikTok Content Creation Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Generated Content:" >> $GITHUB_STEP_SUMMARY
        
        if ls dalle_generation_*.png 1> /dev/null 2>&1; then
          echo "- ✅ **Food Image:** $(ls dalle_generation_*.png | head -1)" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "final_animation.mp4" ]; then
          VIDEO_SIZE=$(du -h final_animation.mp4 | cut -f1)
          echo "- ✅ **Animation:** final_animation.mp4 ($VIDEO_SIZE)" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "tiktok_masterpiece.mp4" ]; then
          MASTER_SIZE=$(du -h tiktok_masterpiece.mp4 | cut -f1)
          echo "- 🎥 **TikTok Masterpiece:** tiktok_masterpiece.mp4 ($MASTER_SIZE)" >> $GITHUB_STEP_SUMMARY
          echo "- 📱 **Format:** 1080x1920 (Perfect 9:16)" >> $GITHUB_STEP_SUMMARY
          echo "- ⏱️ **Duration:** ~8 seconds" >> $GITHUB_STEP_SUMMARY
          echo "- 📝 **Text Overlay:** Recipe text included" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Ready for Social Media!" >> $GITHUB_STEP_SUMMARY
        echo "Your content is optimized for TikTok, YouTube Shorts, and Instagram Reels!" >> $GITHUB_STEP_SUMMARY

    - name: Job completed
      if: always()
      run: echo "✅ Complete TikTok Content Creation mission accomplished"
