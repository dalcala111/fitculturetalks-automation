name: "Ultimate TikTok Content Creator"
on:
  repository_dispatch:
    types: [trigger-midjourney, create-masterpiece]
  workflow_dispatch:
    inputs:
      prompt:
        description: 'Image generation prompt'
        required: true
        default: 'beautiful anime fitness girl doing morning yoga'

jobs:
  tiktok-creator:
    runs-on: ubuntu-latest
    
    steps:
    - name: Set up job
      run: echo "🚀 Starting TikTok Content Creation mission"
      
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Clean Previous Files
      run: |
        echo "🧹 Cleaning previous files..."
        rm -f dalle_generation_*.png dalle_generation_*.jpg
        rm -f *.png *.jpg *.mp4 *.wav *.mp3
        rm -f final_animation.mp4 tiktok_masterpiece.mp4
        echo "✅ Previous files cleared"
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "📦 Dependencies installed"

    # IMAGE GENERATION (only for trigger-midjourney)
    - name: Generate Image
      if: github.event.action == 'trigger-midjourney'
      env:
        PROMPT: ${{ github.event.client_payload.prompt || github.event.inputs.prompt }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "🎨 Generating image with prompt: $PROMPT"
        python image_generator.py

    - name: Install Animation Dependencies
      if: github.event.action == 'trigger-midjourney'
      run: |
        pip install opencv-python pillow numpy imageio imageio-ffmpeg
        echo "🎬 Animation dependencies installed"

    - name: Create Animation Script
      if: github.event.action == 'trigger-midjourney'
      run: |
        cat > animate_image.py << 'EOF'
        import cv2
        import numpy as np
        from PIL import Image
        import os
        from pathlib import Path
        import imageio
        import glob

        def create_social_media_animation(image_path, output_path="final_animation.mp4"):
            print(f"🎬 Creating animation from: {image_path}")
            
            img = cv2.imread(image_path)
            if img is None:
                print(f"❌ Could not load image: {image_path}")
                return False
                
            height, width = img.shape[:2]
            print(f"📏 Original image size: {width}x{height}")
            
            # Social media format (9:16 aspect ratio)
            target_width = 1080
            target_height = 1920
            
            scale = min(target_width/width, target_height/height)
            new_width = int(width * scale)
            new_height = int(height * scale)
            
            img_resized = cv2.resize(img, (new_width, new_height))
            canvas = np.zeros((target_height, target_width, 3), dtype=np.uint8)
            
            y_offset = (target_height - new_height) // 2
            x_offset = (target_width - new_width) // 2
            canvas[y_offset:y_offset+new_height, x_offset:x_offset+new_width] = img_resized
            
            fps = 30
            duration = 8
            total_frames = fps * duration
            frames = []
            
            print(f"🎭 Creating {total_frames} frames...")
            
            for frame_num in range(total_frames):
                progress = frame_num / total_frames
                pulse = 1.0 + np.sin(progress * 6 * np.pi) * 0.03
                angle = np.sin(progress * 2 * np.pi) * 1.5
                zoom = 1.0 + np.sin(progress * np.pi) * 0.05
                scale_factor = pulse * zoom
                
                center = (target_width // 2, target_height // 2)
                rotation_matrix = cv2.getRotationMatrix2D(center, angle, scale_factor)
                frame = cv2.warpAffine(canvas, rotation_matrix, (target_width, target_height))
                
                hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
                hsv[:, :, 1] = cv2.multiply(hsv[:, :, 1], 1.15)
                frame = cv2.cvtColor(hsv, cv2.COLOR_HSV2BGR)
                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                frames.append(frame_rgb)
                
                if frame_num % 60 == 0:
                    print(f"⏳ Frame {frame_num}/{total_frames}")
            
            print("💾 Saving animation...")
            imageio.mimsave(output_path, frames, fps=fps, quality=9)
            print(f"✅ Animation saved as {output_path}")
            return True

        def main():
            print("🔍 Looking for DALL-E generated images...")
            image_patterns = ["dalle_generation_*.png", "dalle_generation_*.jpg", "*.png", "*.jpg"]
            
            image_files = []
            for pattern in image_patterns:
                found_files = glob.glob(pattern)
                if found_files:
                    image_files.extend(found_files)
                    break
            
            if not image_files:
                print("❌ No image files found!")
                return False
                
            image_path = image_files[0]
            print(f"🖼️ Using image: {image_path}")
            return create_social_media_animation(image_path)

        if __name__ == "__main__":
            main()
        EOF

    - name: Generate Animation
      if: github.event.action == 'trigger-midjourney'
      run: |
        echo "🎬 Creating animation..."
        python animate_image.py

    # MASTERPIECE CREATION (only for create-masterpiece)
    - name: Install Video Processing Dependencies
      if: github.event.action == 'create-masterpiece'
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg imagemagick fonts-dejavu-core fonts-liberation
        echo "🎬 Video processing environment ready!"

    - name: Create TikTok Video Editor
      if: github.event.action == 'create-masterpiece'
      run: |
        cat > create_tiktok_masterpiece.py << 'EOF'
        import subprocess
        import os
        import sys
        import glob

        def create_tiktok_video():
            recipe_text = os.environ.get('RECIPE_TEXT', 'Amazing Recipe!')
            print(f"📝 Recipe text received: {recipe_text}")
            
            # Find the animation file - check artifacts first
            animation_files = glob.glob("final_animation.mp4") + glob.glob("*.mp4")
            
            if not animation_files:
                print("❌ No animation found! Need to run image generation first.")
                print("📁 Current directory contents:")
                for item in os.listdir("."):
                    print(f"  - {item}")
                return False
            
            animation_file = animation_files[0]
            print(f"🎬 Using animation: {animation_file}")
            
            # Clean recipe text for FFmpeg
            clean_text = recipe_text.replace("'", "").replace('"', '').replace('\n', ' ')
            print(f"📝 Adding text overlay: {clean_text}")
            
            # Create text overlay with FFmpeg
            cmd = [
                'ffmpeg', '-y',
                '-i', animation_file,
                '-vf', f'drawtext=text=\'{clean_text}\':fontfile=/usr/share/fonts/truetype/liberation/LiberationSans-Bold.ttf:fontsize=36:fontcolor=white:x=(w-text_w)/2:y=h-150:box=1:boxcolor=black@0.8:boxborderw=8',
                '-c:a', 'copy',
                '-preset', 'fast',
                'tiktok_masterpiece.mp4'
            ]
            
            try:
                result = subprocess.run(cmd, capture_output=True, text=True, check=True)
                print("✅ TikTok masterpiece created!")
                
                # Verify output
                if os.path.exists('tiktok_masterpiece.mp4'):
                    size = os.path.getsize('tiktok_masterpiece.mp4') / (1024*1024)
                    print(f"📊 Masterpiece size: {size:.1f} MB")
                return True
            except subprocess.CalledProcessError as e:
                print(f"❌ FFmpeg error: {e}")
                print(f"❌ FFmpeg stderr: {e.stderr}")
                return False
            except Exception as e:
                print(f"❌ Error: {e}")
                return False

        if __name__ == "__main__":
            success = create_tiktok_video()
            sys.exit(0 if success else 1)
        EOF

    - name: Create TikTok Masterpiece
      if: github.event.action == 'create-masterpiece'
      env:
        RECIPE_TEXT: ${{ github.event.client_payload.recipe_text }}
      run: |
        echo "🎬 Creating TikTok masterpiece..."
        python create_tiktok_masterpiece.py

    # UPLOAD ARTIFACTS
    - name: Upload Images
      if: always() && github.event.action == 'trigger-midjourney'
      uses: actions/upload-artifact@v4
      with:
        name: generated-images
        path: "dalle_generation_*.png"
        retention-days: 30

    - name: Upload Animation
      if: always() && github.event.action == 'trigger-midjourney'
      uses: actions/upload-artifact@v4
      with:
        name: animated-video
        path: "final_animation.mp4"
        retention-days: 30

    - name: Upload TikTok Masterpiece
      if: always() && github.event.action == 'create-masterpiece'
      uses: actions/upload-artifact@v4
      with:
        name: tiktok-masterpiece
        path: |
          tiktok_masterpiece.mp4
          final_animation.mp4
        retention-days: 30

    - name: Create Summary
      if: always()
      run: |
        echo "## 🎬 TikTok Content Creation Complete!" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event.action }}" == "trigger-midjourney" ]; then
          echo "### 📸 Image & Animation Generated" >> $GITHUB_STEP_SUMMARY
          echo "- Original food image created" >> $GITHUB_STEP_SUMMARY
          echo "- Animation ready for TikTok" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ github.event.action }}" == "create-masterpiece" ]; then
          echo "### 🎥 TikTok Masterpiece Created" >> $GITHUB_STEP_SUMMARY
          echo "- Text overlay added" >> $GITHUB_STEP_SUMMARY
          echo "- Ready for social media upload" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Job completed
      if: always()
      run: echo "✅ TikTok Content Creation mission completed"
