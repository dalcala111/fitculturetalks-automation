name: "Deuce Reference Dance Video Generator"

on:
  repository_dispatch:
    types: [trigger-shih-tzu-video-reference]
  workflow_dispatch:
    inputs:
      prompt:
        description: 'Manual prompt override'
        required: false
        default: ''

jobs:
  generate-deuce-dance-video:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Debug n8n Payload
      run: |
        echo "=== DEBUGGING N8N PAYLOAD ==="
        echo "Raw payload:"
        echo '${{ toJson(github.event.client_payload) }}'
        echo "==========================="
        echo "Selected dance: '${{ github.event.client_payload.selected_dance }}'"
        echo "Reference URL: '${{ github.event.client_payload.reference_video_url }}'"
        echo "Runway prompt: '${{ github.event.client_payload.runway_prompt }}'"
        echo "Use video ref: '${{ github.event.client_payload.use_video_reference }}'"
        echo "==========================="

    - name: Clean workspace
      run: |
        echo "🧹 Cleaning workspace..."
        rm -f *.mp4 *.png *.jpg *.wav *.mp3 runway_task.json || true
        echo "✅ Workspace cleaned"

    - name: Download reference video
      env:
        REFERENCE_VIDEO_URL: ${{ github.event.client_payload.reference_video_url }}
        SELECTED_DANCE: ${{ github.event.client_payload.selected_dance }}
      run: |
        set -euo pipefail
        echo "🎥 Downloading reference video for $SELECTED_DANCE..."
        echo "📺 URL: $REFERENCE_VIDEO_URL"
        if [ -z "$REFERENCE_VIDEO_URL" ]; then
          echo "❌ ERROR: Reference video URL is empty!"
          exit 1
        fi
        curl -sSLo reference_video.mp4 -fL "$REFERENCE_VIDEO_URL"
        if [ -f "reference_video.mp4" ] && [ -s "reference_video.mp4" ]; then
          echo "✅ Reference video downloaded successfully!"
          ls -la reference_video.mp4
        else
          echo "❌ Failed to download reference video or file is empty"
          exit 1
        fi

    - name: Setup Python environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python deps
      run: |
        python -m pip install --upgrade pip
        pip install requests
        echo "📦 Dependencies installed"

    - name: Install FFmpeg
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        echo "🎬 FFmpeg installed"

    - name: Generate video with RunwayML
      env:
        RUNWAY_PROMPT: ${{ github.event.client_payload.runway_prompt }}
        SELECTED_DANCE: ${{ github.event.client_payload.selected_dance }}
        RUNWAYML_API_KEY: ${{ secrets.RUNWAYML_API_KEY }}
        # Choose a model/ratio the dev API supports:
        # - gen4_turbo  -> portrait ratio 720:1280
        # - gen3a_turbo -> portrait ratio 768:1280
        RUNWAY_MODEL: gen3_turbo
        RUNWAY_RATIO: 720:1280
        RUNWAY_DURATION: "10"
      run: |
        set -euo pipefail
        echo "🎬 Generating video with RunwayML (dev API)..."
        echo "📝 Prompt: ${RUNWAY_PROMPT}"
        echo "💃 Dance: ${SELECTED_DANCE}"
        echo "🌐 API: https://api.dev.runwayml.com"

        python - << 'PY'
        import os, time, json, base64, requests, sys

        API_KEY   = os.environ['RUNWAYML_API_KEY']
        PROMPT    = os.environ.get('RUNWAY_PROMPT', '')
        MODEL     = os.environ.get('RUNWAY_MODEL', 'gen4_turbo')
        RATIO     = os.environ.get('RUNWAY_RATIO', '720:1280')
        DURATION  = int(os.environ.get('RUNWAY_DURATION', '10'))

        if not API_KEY:
            print("❌ RUNWAYML_API_KEY missing"); sys.exit(1)
        if not PROMPT:
            print("❌ RUNWAY_PROMPT missing"); sys.exit(1)
        if not os.path.exists("reference_video.mp4"):
            print("❌ reference_video.mp4 missing"); sys.exit(1)

        # Build data URI from the downloaded MP4
        with open("reference_video.mp4", "rb") as f:
            b64 = base64.b64encode(f.read()).decode("utf-8")
        video_uri = f"data:video/mp4;base64,{b64}"

        headers = {
            "Authorization": f"Bearer {API_KEY}",
            "Content-Type": "application/json",
            "X-Runway-Version": "2024-11-06",
        }
        payload = {
            "model": MODEL,            # gen4_turbo or gen3a_turbo (see docs)
            "promptText": PROMPT,
            "videoUri": video_uri,     # data-URI avoids remote URL header/redirect issues
            "ratio": RATIO,            # 720:1280 for gen4_turbo; 768:1280 for gen3a_turbo
            "duration": DURATION,      # seconds
        }

        print("🚀 POST https://api.dev.runwayml.com/v1/video_to_video")
        r = requests.post("https://api.dev.runwayml.com/v1/video_to_video",
                          headers=headers, json=payload, timeout=180)
        print(f"📡 Status: {r.status_code}")
        if r.status_code not in (200, 201, 202):
            print("❌ API error:", r.text[:800]); sys.exit(1)

        task = r.json()
        with open('runway_task.json', 'w') as f:
            json.dump(task, f, indent=2)

        task_id = task.get("id")
        if not task_id:
            print("❌ No task id in response:", task); sys.exit(1)
        print("🆔 Task:", task_id)

        # Poll for completion
        start = time.time()
        while True:
            tr = requests.get(f"https://api.dev.runwayml.com/v1/tasks/{task_id}",
                              headers=headers, timeout=60)
            if tr.status_code != 200:
                print("⚠️ Poll error:", tr.status_code, tr.text[:200])
                time.sleep(5); continue
            tj = tr.json()
            status = tj.get("status")
            prog = tj.get("progress", 0)
            print(f"🔄 {status} {prog}%")

            if status == "SUCCEEDED":
                outs = tj.get("output") or []
                if not outs:
                    print("❌ No output URLs in task"); sys.exit(1)
                url = outs[0]
                print("✅ Completed. Downloading:", url[:120], "...")
                vid = requests.get(url, timeout=300)
                if vid.status_code != 200:
                    print("❌ Download failed:", vid.status_code, vid.text[:200]); sys.exit(1)
                with open("final_animation.mp4", "wb") as f:
                    f.write(vid.content)
                print("💾 Saved final_animation.mp4")
                break

            if status == "FAILED":
                print("❌ Task failed:", json.dumps(tj)[:800]); sys.exit(1)

            if time.time() - start > 900:  # 15 minutes timeout
                print("❌ Timed out"); sys.exit(1)
            time.sleep(5)
        PY

    - name: Create fallback video
      if: failure()
      run: |
        echo "🔄 Creating fallback video..."
        if [ ! -f "final_animation.mp4" ] && [ -f "reference_video.mp4" ]; then
          echo "📹 Using reference video as fallback"
          cp reference_video.mp4 final_animation.mp4
          echo "✅ Fallback video created"
        elif [ -f "final_animation.mp4" ]; then
          echo "✅ Video already exists, no fallback needed"
        else
          echo "❌ No video available for fallback"
        fi

    - name: Process final video
      env:
        SELECTED_DANCE: ${{ github.event.client_payload.selected_dance }}
      run: |
        set -euo pipefail
        echo "🎬 Processing final video..."
        if [ ! -f "final_animation.mp4" ]; then
          echo "❌ No video file found"
          ls -la *.mp4 2>/dev/null || echo "No MP4 files found"
          exit 1
        fi
        ffmpeg -y -i final_animation.mp4 \
          -vf "drawtext=text='Deuce does the ${SELECTED_DANCE}!':fontsize=48:fontcolor=white:x=(w-text_w)/2:y=h-120:box=1:boxcolor=black@0.8:boxborderw=6" \
          -c:v libx264 -c:a copy \
          tiktok_masterpiece.mp4
        if [ -f "tiktok_masterpiece.mp4" ]; then
          echo "✅ Final video processed successfully!"
          ls -la tiktok_masterpiece.mp4
        else
          echo "⚠️ Using original video as final output"
          cp final_animation.mp4 tiktok_masterpiece.mp4
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deuce-dance-video
        path: |
          tiktok_masterpiece.mp4
          final_animation.mp4
          reference_video.mp4
          runway_task.json
        retention-days: 7

    - name: Summary
      run: |
        echo "## 🕺 Deuce Dance Video Generated! ✨" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f "tiktok_masterpiece.mp4" ]; then
          VIDEO_SIZE=$(du -h tiktok_masterpiece.mp4 | cut -f1)
          echo "- 🎥 **Video:** tiktok_masterpiece.mp4 ($VIDEO_SIZE)" >> $GITHUB_STEP_SUMMARY
          echo "- 💃 **Dance:** ${{ github.event.client_payload.selected_dance }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📱 **Format:** Portrait (ratio ${{ env.RUNWAY_RATIO }})" >> $GITHUB_STEP_SUMMARY
          echo "- ⏱️ **Duration:** ${{ env.RUNWAY_DURATION }} seconds" >> $GITHUB_STEP_SUMMARY
          echo "- 🎬 **Status:** Ready for upload!" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ **Status:** Video generation failed" >> $GITHUB_STEP_SUMMARY
        fi
